In an employee database, would you store a person's physical age, their date of birth, or both? Why or why not?
	The question of whether to store a person's physical age, their date of birth, or both may seem like an easy choice, but in reality, it is not, if you are true to storing as little data in the database as possible without compromising future needs. Then you should only have the employee's date of birth. If you must choose between them, then this value is your best bet, as it does not limit the possibility of future updates/features for the program that uses this data. 
	There are a couple of potential reasons why you would always want the date of birth. If you only had the physical age, then you would have to auto-increment that value at a particular time of year. Doing this can cause issues if an employee's birthday is on December 29th and you choose to increment the ages of all employees on January 1st. The system also thinks the employee is one year older than they really are if you don't use transactions correctly throughout your code. You can be in the middle of updating employee ages when the database connection fails. You may not know which employees' ages have been updated, and which ones have nenen, which could then cause data integrity issues to arise.
	Another reason is because of birthday prompts. While it can be annoying for some, it is a nice touch to be able to display a Happy Birthday message to an employee on their birthday. Having just that age would not allow you to do that.
	Now, I have provided a couple of reasons why you should always include the birthday instead of the employee's physical age. There are a couple of reasons why you may want to include the physical age of the employee in the database as well. Sometimes, due to regulations, you need to know someone's age as of a specific date. By having a calculated column that is an "Age as of time". You can reduce duplicate code that you may need to do.
	Additionally, although it causes a slight slowdown, you can create calculated columns in tables. These columns are calculations based on other columns. Depending on the database type, this value is either stored with the data or is calculated as it is pulled and never stored. In other words, depending on the database type, you can have a computed column and increase the storage used by the database by such a small degree that it is not noticeable.


In case my ramble was a bit confusing, I typically only store the employee's birthdate, unless there is a regulatory requirement that necessitates constant calculations based on the birthdate.