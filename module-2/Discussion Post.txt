What is the difference between an Entity Relationship Diagram and an Object Relationship Diagram? Provide an example of when you might use each.
	The primary difference between an Entity-Relationship Diagram (ERD) and an Object-Relationship Diagram (ORD) is that an ERD is designed explicitly for data structures. At the same time, ORDs are for both data and business logic. The ERD type diagram is what I have come across most often. It can be helpful to have an ORD to reference when looking at code. The issue is that the relationships between objects in code can change so frequently that it is next to impossible to keep that type of diagram up to date without an automated process of some kind.
 	Entity-Relationship diagrams contain information about databases, tables, columns within the tables, and constraints on the columns. This diagram is designed to illustrate the relationship between tables within a database. Sometimes, you will also want to show the relationship between different tables stored in other databases. This diagram does not contain any mentions of code or similar elements. Instead, it is intended solely to illustrate the data structure and its relationships.Â We use this when talking about new projects that require new data tables.
 	Object-Relationship Diagrams are generally used to show as much information as possible about the application. In the past, I have seen ORDs created in conjunction with flowcharts, allowing people to reference the ORDs while reading a flowchart. In my experience, unless you work for a company that has automated software to create and keep these diagrams up to date, it is challenging to maintain them manually. Outside of the initial development of the application, this type of diagram is considered next to useless as changes are made to the system. We use this when the system is complex and we want future programmers to be able to reference the diagram before making changes to the code. As I mentioned earlier, at specific points, this diagram becomes useless and potentially detrimental as the objects shift. A developer may look at this diagram and think that there are no additional relationships to worry about. This can lead to logic errors in code that are difficult to identify, as it requires the developer to study the code instead of relying on the diagram. They will have a higher certainty that their changes will not harm downstream projects.
 	There is a variety of information that can be found in an ORD. When examining an ORD, you should expect to see classes listed. The relationships between these classes. The attributes and methods within each class. Along with a description of the class itself.