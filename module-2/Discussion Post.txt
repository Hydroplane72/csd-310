What is the difference between an Entity Relationship Diagram and an Object Relationship Diagram? Provide an example of when you might use each.

	The primary difference between an Entity-Relationship Diagram (ERD) and an Object-Relationship Diagram (ORD) is that an ERD is designed explicitly for data structures. At the same time, ORDs are for both data and business logic. The ERD type diagram is what I have come across most often. It can be helpful to have an ORD to reference when looking at code. The issue is that the relationships between objects in code can change so frequently that it is next to impossible to keep that type of diagram up to date without an automated process of some kind.
	Entity-Relationship diagrams contain information about databases, tables, columns within the tables, and constraints on the columns. This diagram is designed to illustrate the relationship between tables within a database. Sometimes, you will also want to show the relationship between different tables stored in other databases. This diagram does not contain mentions of code or anything similar. Instead, it is purely meant to illustrate the data structure and the relationships within it. 
	Object-Relationship Diagrams are generally used to show as much information as possible about the application. In the past, I have seen ORDs created in conjunction with flowcharts, allowing people to reference the ORDs while reading a flowchart. In my experience, unless you work for a company that has automated software to create and keep these diagrams up to date. Outside of the initial development of the application, this type of diagram is considered next to useless as changes are made to the system.
	There is a variety of information that can be found in an ORD. When looking at an ORD, you should expect to see classes. The relationships between these classes. The attributes and methods within each class. Along with a description of the class itself.